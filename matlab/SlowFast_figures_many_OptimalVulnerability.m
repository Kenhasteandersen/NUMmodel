% This script calculates the "optimal" vulnerability for the phagotrophs in
% a simulation with k numbers of groups.
% use already saved simulation?

tempo = cmocean('tempo');
load('VulnerabilityColormap.mat');
%% Define Parameters
% number of size groups:
n = 20;
% number of generlist groups with different vulnerabilities:
k = 8;%!

% HTL mortality
% - HTL mortality pressure (vector)
mortHTLvector=logspace(-3,0,30);
% - HTL lower limit
mHTL=1/500^1.5;
% - HTL use quadratic mortality?
bQuadraticHTL=false;
bDecliningHTL=false;

nd=30;
% mixing rate vector:
dvector=logspace(-3,-1,nd);

% phagotrophic affinity vector
% alphaF=logspace(-4,0,k);

% parameters that define the vulnerability
gamma=0.6505;
v0_coefficient=1.7198;

% Years of simulation
tEnd=5;
% Make a mean of the last tSave years:
tSave=2;

% run simulation in parallel?:
bParallel = false;


mMinGeneralist = '2.5d-8';  % Smallest cell size [mug C]
mMaxGeneralist = '10.0d0';  %Largest cell size [mug C]

% Light uptake:
epsilonL = '0.8d0';         % Light uptake efficiency []
alphaL = '0.3d0';           % Light affinity coef. [1/(uE/m2/s) 1/day um]
rLstar = '7.5d0';           % Light affinity cross-over size [um]

% Dissolved nutrient and DOC uptake:
alphaN = '0.972d0';         % Diffusive affinity coefficient [L/d/mugC/um^2]
rNstar = '0.4d0';           % Diffusive affinity cross-over size [um]

% Phagotrophy:

epsilonF = '0.8d0';	        % Food assimilation efficiency [-]
cF = '30.0d0';              % Max phagotrophy coefficient [um/day]
beta = '500.d0';            % Preferred predator-prey mass ratio
sigma = '1.3d0';            % Preferred predator-prey mass range

% Metabolism:

cLeakage = '0.03d0';        % Passive leakage of C and N
delta = '0.05d0';           % Thickness of cell wall [um]
alphaJ = '1.5d0';           % Constant for jMax [day-1]
cR = '0.1d0';               % Basal metabolism relative to jMax [-]

% Biogeo:
remin2 = '0.5d0';           % Fraction of viral lysis remineralized to DOC
reminF = '0.1d0';           % Fraction of feeding losses remineralized

%% Calculate vulnerability
alphaF_constant=logspace(-4,0,20);
palatability_constant=10^(v0_coefficient).*alphaF_constant.^(gamma);
palatability_constant=palatability_constant./mean(palatability_constant);

inr=round(linspace(9,20,k));
alphaF=[alphaF_constant(inr)];
palatability=[palatability_constant(inr)];

%% Collect data
disp('Collecting the data')
if exist('p','var')==0
    % p = setupGeneralistsSimpleK(n,k, bParallel);
    % Nutrients:
    p = setupNutrients_N_DOC;
    % Prokaryote
    p = parametersAddgroup(6,p,n);

    % Generalists:
    for i=1:k
        p = parametersAddgroup(1,p,n);
    end

    p = getMass(p);

    deltax = (log(str2num(mMaxGeneralist))-log(str2num(mMinGeneralist)))./ n;
    for i=1:n
        x = log(str2num(mMinGeneralist)) + (i-0.5).*deltax;
        m(i) = exp(x);
        mLower(i) = exp(x - 0.5.*deltax);
        mDelta(i) =  exp(x + 0.5.*deltax)-mLower(i);
    end
    massofgeneralists=m;
end

namestart=fullfile('ModelResults','mean','Results_imort_');
a=dir([namestart,'*']);
thenames=fullfile('ModelResults','mean',{a.name}');
imort_nr=str2double(extractBetween(thenames,'_imort_','_dvector_'));
dvector_nr=str2double(extractBetween(thenames,'_dvector_','.mat'));

B=nan(length(dvector),p.n-2,length(mortHTLvector));
jLreal=B;
jFreal=B;
jDOC=B;
for i=1:length(thenames)
    tmp_load=load(thenames{i});
    B(dvector_nr(i),:,imort_nr(i))=tmp_load.B_mean;
    jLreal(dvector_nr(i),:,imort_nr(i))=tmp_load.jLreal_mean;
    jFreal(dvector_nr(i),:,imort_nr(i))=tmp_load.jFreal_mean;
    jDOC(dvector_nr(i),:,imort_nr(i))=tmp_load.jDOC_mean;
end

%% Plot
% standard plots:
load('cmaps.mat')
B_DOC=B.*(jDOC./(jDOC+jLreal+jFreal));
B_L=B.*(jLreal./(jDOC+jLreal+jFreal));
B_F=B.*(jFreal./(jDOC+jLreal+jFreal));
% B_L=B.*(jLreal./(jLreal+jFreal));
% B_F=B.*(jFreal./(jLreal+jFreal));

%%
% go through each of the nutrient levels (the y direction) and make a
% B_F(vuln.level,size group):
% figure;
% t=tiledlayout(length(dvector),length(mortHTLvector),'TileIndexing','columnmajor');
% t.TileSpacing = 'compact';
% t.Padding = 'compact';
%
% for mortgroup=1:length(mortHTLvector)
%     for ngroup=1:length(dvector)
%         a=nan(k,n);
%         for i=2:k+1
%             a(i-1,:)=B_F(ngroup,p.ixStart(i)-2:p.ixEnd(i)-2,mortgroup);
%         end
%         nexttile
%         a(isinf(a))=NaN;
%
%         contourf(a,'LineStyle','none','ShowText','off')
%         % clim([0 30])
%         set(gca,'XScale','log')
%         % ylabel('vulnerability group number')
%         % xlabel('size')
%         if ngroup==1
%         title(['mort=',num2str(mortgroup)])
%         end
%         if mortgroup==1
%         ylabel(['mixing=',num2str(ngroup)])
%         end
%         colorbar
%     end
% end
%% Find the best vulnerability and the size that matches
maxmortgroup=length(mortHTLvector);
%for all mortality simulation
for mortgroup=1:maxmortgroup
    %for all nutrient simulation
    for ngroup=1:length(dvector)
        a=nan(k,n);
        % for each of the vulnerability groups
        for i=2:k+1
            % collect the data
            a(i-1,:)=B_F(ngroup,p.ixStart(i)-2:p.ixEnd(i)-2,mortgroup);
        end
        a(isinf(a))=NaN;
        % find the location of the maximum BF
        if ~isempty(find(~isnan(a), 1))
            [ix_max_vuln_group,ix_max_size]=find(a == max(max(a)));

            best_vuln(ngroup,mortgroup)=ix_max_vuln_group;
            best_size(ngroup,mortgroup)=ix_max_size;
        else
            best_vuln(ngroup,mortgroup)=NaN;
            best_size(ngroup,mortgroup)=NaN;
        end

    end
end
    
[x,y]=meshgrid(mortHTLvector(1:maxmortgroup),dvector);
[x2,y2]=meshgrid(exp(interp(log(mortHTLvector(1:maxmortgroup)),2)),exp(interp(log(dvector),2)));

%%
figure('Color','w');
load('VulnerabilityColormap.mat');
cf1=subplot(1,2,1);
thebestgroup=palatability(best_vuln);
% tbg2=exp(interp2(log(x),log(y),log(thebestgroup),log(x2),log(y2)));
[~,hh]=contourf(x,y,log(thebestgroup),20,'linestyle','none')
cmap=colorbar(gca);
cmap.Ticks=log([0.5 1:5]);
for iiii=1:length(cmap.TickLabels)
tl_new(iiii)=exp(str2double(cmap.TickLabels(iiii)));
end
cmap.TickLabels=round(tl_new,1);
ylabel(cmap,'optimal vulnerability')

hold on
% [C,h]=contour(x,y,thebestgroup,[1 2 3 4 5],'Color','w','ShowText','on');
% th=clabel(c,h)
% h.LabelColor='w';
% colormap(cf1,VulnerabilityColormap)

set(gca,'XScale','log','YScale','log','FontSize',12);

ylabel('nutrient influx');
xlabel('HTL mortality');
subtitle('optimal vulnerability')

%%
cf2=subplot(1,2,2);
contourf(x,y,best_size,'linestyle','none')
colormap(cf2,tempo)
colorbar
clim([1 20])
set(gca,'XScale','log','YScale','log');
ylabel('nutrient influx');
xlabel('HTL mortality');
subtitle('Optimal Size')


%%
thisratio=B_F./(B_F+B_L).*100;
for mortgroup=1:maxmortgroup
    %for all nutrient simulation
    for ngroup=1:length(dvector)
        thisbestvuln=best_vuln(ngroup,mortgroup);
        % collect the ratio from this vulnerability group
        goodgroup(ngroup,:,mortgroup)=thisratio(ngroup,p.ixStart(thisbestvuln+1)-2:p.ixEnd(thisbestvuln+1)-2,mortgroup);
        % find the ratio in the size that is optimal
        opt_vuln_ratio(ngroup,mortgroup)=goodgroup(ngroup,best_size(ngroup,mortgroup),mortgroup);

        % find which ixd (of total size group incl all vulnerability types
        % is the best ratio
        [~,ixaa]=max(thisratio(ngroup,:,mortgroup));
        % find out which vulnerability type that belongs to
        maxratioidx(ngroup,mortgroup)=find(ixaa<=(p.ixEnd-2), 1 )-1;

    end
end

%%



subplot(2,2,2)
contourf(x,y,maxratioidx,'linestyle','none')
set(gca,'XScale','log','YScale','log');
ylabel('nutrient influx');
xlabel('HTL mortality');
subtitle('Vulnerability with max phagotrophic ratio')
colorbar

subplot(2,2,3)
maxratio=squeeze(max(thisratio,[],2));
contourf(x,y,maxratio,'linestyle','none')
set(gca,'XScale','log','YScale','log');
ylabel('nutrient influx');
xlabel('HTL mortality');
subtitle('max phagotrophic ratio')

subplot(2,2,4)
contourf(x,y,opt_vuln_ratio,'linestyle','none')
set(gca,'XScale','log','YScale','log');
ylabel('nutrient influx');
xlabel('HTL mortality');
subtitle('the ratio of phag/phot for the optimal group and size')
% 
% 
% for mortgroup=1:maxmortgroup
%     %for all nutrient simulation
%     for ngroup=1:length(dvector)
%         B_F_sorted(ngroup,:,mortgroup)=B_F(ngroup,:,mortgroup);
% 
%     end
% end
%%


%% Figure of concentrations

Bsum=squeeze(sum(B,2));
Bsum=Bsum(:,1:maxmortgroup);
B_Fsum=squeeze(sum(B_F,2));
B_Lsum=squeeze(sum(B_L,2));
B_DOCsum=squeeze(sum(B_DOC,2));

B_Fsum=B_Fsum(:,1:maxmortgroup);
B_Lsum=B_Lsum(:,1:maxmortgroup);
B_DOCsum=B_DOCsum(:,1:maxmortgroup);
thisratio=thisratio(:,:,1:maxmortgroup);
%%
figure('Color','w','Position',[100 100 1500 1000]);
tiledlayout(4,3,"Padding","loose","TileSpacing","loose")

s1=nexttile(1,[3 3]);
contourf(x,y,Bsum,'linestyle','none')
ax=gca;
theselims_large=ax.CLim;
set(gca,'XScale','log','YScale','log');
cc=colorbar;
% axis square
ylabel(cc,'\mug C l^{-1}','FontSize',12)
ylabel('nutrient influx');
% xlabel('HTL mortality');
title('a) Biomass concentration','HorizontalAlignment','left','Position',[1*10^-3 0.11 0])

s2=nexttile(10);
contourf(x,y,B_Lsum,'linestyle','none')
set(gca,'XScale','log','YScale','log','Clim',[0 250]);
% axis square
% set(colorbar,'Visible','off');
ylabel('nutrient influx');
xlabel('HTL mortality');
title('b) B_L concentration','HorizontalAlignment','left','Position',[1*10^-3 0.11 0])
% s2.Position(1)=s2.Position(1);

s3=nexttile(11);
% s3=subplot(3,5,9:10)
contourf(x,y,B_DOCsum,'linestyle','none')
set(gca,'XScale','log','YScale','log','Clim',[0 250]);
% axis square
% set(colorbar,'Visible','off');
% ylabel('nutrient influx');
xlabel('HTL mortality');
title('c) B_{DOC} concentration','HorizontalAlignment','left','Position',[1*10^-3 0.11 0])
% s3.Position(1)=s2.Position(1);

s4=nexttile(12);
% s4=subplot(3,5,14:15)
contourf(x,y,B_Fsum,'linestyle','none')
set(gca,'XScale','log','YScale','log','Clim',[0 250]);
% axis square
cbar=colorbar;
% cbar.Location='southoutside';
% thesepos=cc.Position;
% thesepos(1)=0.93;
% cbar.Position=thesepos;
ylabel(cbar,'\mug C l^{-1}','FontSize',12)
% cbar.Position(4)=(s2.Position(2)-s4.Position(2)+s2.Position(4));
% cbar.Position(1)=0.92;
% cbar.Position(3)=cc.Position(4);

% ylabel('nutrient influx');
xlabel('HTL mortality');
title('d) B_F concentration','HorizontalAlignment','left','Position',[1*10^-3 0.11 0]);


%%
figure;
subplot(1,3,1)

contourf(x,y,B_Fsum./Bsum.*100,'linestyle','none')
colorbar
clim([0 70])
set(gca,'XScale','log','YScale','log');
ylabel('nutrient influx');
xlabel('HTL mortality');
subtitle('B_F % of B')

subplot(1,3,2)
contourf(x,y,B_Lsum./Bsum.*100,'linestyle','none')
% colorbar
clim([0 70])
set(gca,'XScale','log','YScale','log');
ylabel('nutrient influx');
xlabel('HTL mortality');
subtitle('B_L % of B')


subplot(1,3,2)
contourf(x,y,B_DOCsum./Bsum.*100,'linestyle','none')
colorbar
clim([0 70])
set(gca,'XScale','log','YScale','log');
ylabel('nutrient influx');
xlabel('HTL mortality');
subtitle('B_{DOC} % of B')




%% Choose a place for plotting:
iHTL=1; %x-axis
iNUT=1; %y-axis

marklines=(0.4*1d6*1d-12).*(4/3).*pi.*[2 20].^(3);
figure('Color','w');
subplot(4,2,2)
pcolor(best_vuln)
shading flat
ylabel('iNUT');
xlabel('iHTL');
subtitle('optimal vulnerability')
% [iHTL,iNUT]=ginput(1);
hold on
plot(iHTL,iNUT,'*r')

thisname=[namestart,num2str(iHTL),'_dvector_',num2str(iNUT),'.mat'];
tmp_load=load(thisname);
for i=1:p.nGroups
    B_this(i,1:n)=tmp_load.B_mean(n*(i-1)+1:n*i);
    BDOC_this(i,1:n)=tmp_load.B_mean(n*(i-1)+1:n*i).*(tmp_load.jDOC_mean(n*(i-1)+1:n*i)./(tmp_load.jDOC_mean(n*(i-1)+1:n*i)+tmp_load.jLreal_mean(n*(i-1)+1:n*i)+tmp_load.jFreal_mean(n*(i-1)+1:n*i)));
    BL_this(i,1:n)=tmp_load.B_mean(n*(i-1)+1:n*i).*(tmp_load.jLreal_mean(n*(i-1)+1:n*i)./(tmp_load.jDOC_mean(n*(i-1)+1:n*i)+tmp_load.jLreal_mean(n*(i-1)+1:n*i)+tmp_load.jFreal_mean(n*(i-1)+1:n*i)));
    BF_this(i,1:n)=tmp_load.B_mean(n*(i-1)+1:n*i).*(tmp_load.jFreal_mean(n*(i-1)+1:n*i)./(tmp_load.jDOC_mean(n*(i-1)+1:n*i)+tmp_load.jLreal_mean(n*(i-1)+1:n*i)+tmp_load.jFreal_mean(n*(i-1)+1:n*i)));
    jmortHTL_this(i,1:n)=tmp_load.jmortHTL_mean(n*(i-1)+1:n*i);
    jmortpred_this(i,1:n)=tmp_load.jmortpred_mean(n*(i-1)+1:n*i);
end

% figure;
cm = jet(k);
% massofgeneralists=p.m(p.ixStart(2):p.ixEnd(2));
subplot(4,2,1)
hold on
for i=k+1:-1:2
    plot(massofgeneralists,B_this(i,:),'Color',cm(i-1,:),'DisplayName',['Generalist ',num2str(i)],'LineWidth',1.5)
end
theselims=ylim;
for i=1:length(theselims)
    plot([marklines(i) marklines(i)],theselims,'--','Color','r')
end
xlim([min(massofgeneralists) max(massofgeneralists)])
set(gca,'XScale','log');
subtitle('B')
legend('show','Location','eastoutside')

subplot(4,2,3)
hold on
for i=k+1:-1:2
    plot(massofgeneralists,BF_this(i,:),'Color',cm(i-1,:),'DisplayName',['Generalist ',num2str(i)],'LineWidth',1.5)
end
for i=1:length(theselims)
    plot([marklines(i) marklines(i)],theselims,'--','Color','r')
end
ylim(theselims)
xlim([min(massofgeneralists) max(massofgeneralists)])
set(gca,'XScale','log');
subtitle('BF')
legend('show','Location','eastoutside')

subplot(4,2,5)
hold on
for i=k+1:-1:2
    plot(massofgeneralists,BL_this(i,:),'Color',cm(i-1,:),'DisplayName',['Generalist ',num2str(i)],'LineWidth',1.5)
end
ylim(theselims)
for i=1:length(theselims)
    plot([marklines(i) marklines(i)],theselims,'--','Color','r')
end
xlim([min(massofgeneralists) max(massofgeneralists)])
set(gca,'XScale','log');
subtitle('BL')
legend('show','Location','eastoutside')

subplot(4,2,7)
hold on
for i=k+1:-1:2
    plot(massofgeneralists,BDOC_this(i,:),'Color',cm(i-1,:),'DisplayName',['Generalist ',num2str(i)],'LineWidth',1.5)
end
ylim(theselims)
for i=1:length(theselims)
    plot([marklines(i) marklines(i)],theselims,'--','Color','r')
end
xlim([min(massofgeneralists) max(massofgeneralists)])
set(gca,'XScale','log');
subtitle('BDOC')
legend('show','Location','eastoutside')

subplot(4,2,4)
hold on
for i=k+1:-1:2
    plot(massofgeneralists,jmortHTL_this(i,:),'Color',cm(i-1,:),'DisplayName',['Generalist ',num2str(i)],'LineWidth',1.5)
end
for i=1:length(theselims)
    plot([marklines(i) marklines(i)],ylim,'--','Color','r')
end
xlim([min(massofgeneralists) max(massofgeneralists)])
set(gca,'XScale','log');
subtitle('jmortHTL')
legend('show','Location','eastoutside')

subplot(4,2,6)
hold on
for i=k+1:-1:2
    plot(massofgeneralists,jmortpred_this(i,:),'Color',cm(i-1,:),'DisplayName',['Generalist ',num2str(i)],'LineWidth',1.5)
end
for i=1:length(theselims)
    plot([marklines(i) marklines(i)],ylim,'--','Color','r')
end
xlim([min(massofgeneralists) max(massofgeneralists)])
set(gca,'XScale','log');
subtitle('jmortpred')
legend('show','Location','eastoutside')

subplot(4,2,8)
hold on
for i=k+1:-1:2
    plot(massofgeneralists,BF_this(i,:)./(BF_this(i,:)+BL_this(i,:)),'Color',cm(i-1,:),'DisplayName',['Generalist ',num2str(i)],'LineWidth',1.5)
end
ylim([0 1])
for i=1:length(theselims)
    plot([marklines(i) marklines(i)],ylim,'--','Color','r')
end
xlim([min(massofgeneralists) max(massofgeneralists)])
set(gca,'XScale','log');
subtitle('ratio of BF to BL')
legend('show','Location','eastoutside')

sgtitle(['mortHTL idx = ',num2str(iHTL),'mixing rate idx = ',num2str(iNUT)])


%%
%% Choose a place for plotting:
figure('Color','w'); %(mean of nutrient concentrations)
iHTL=1:30; %x-axis on the previous plot
iNUT=1:30; %y-axis on the previous plot

marklines=(0.4*1d6*1d-12).*(4/3).*pi.*[2 20].^(3);
for kk=1:length(iNUT)
    for j=1:length(iHTL)

        thisname=[namestart,num2str(iHTL(j)),'_dvector_',num2str(iNUT(kk)),'.mat'];
        tmp_load=load(thisname);
        for i=1:p.nGroups
            BF_this(i,1:n)=tmp_load.B_mean(n*(i-1)+1:n*i).*(tmp_load.jFreal_mean(n*(i-1)+1:n*i)./(tmp_load.jDOC_mean(n*(i-1)+1:n*i)+tmp_load.jLreal_mean(n*(i-1)+1:n*i)+tmp_load.jFreal_mean(n*(i-1)+1:n*i)));
        end
        % summerize data from all (9) vulnerability classes:
        BF_summedVuln(j,:,kk)=sum(BF_this)';
        % find out which vulnerability class has the maximum biomass:
        [~,ix_max_BF_tmp]=max(BF_this);
        ix_max_BF(j,:,kk)=ix_max_BF_tmp;
    end
end
% set vulnerability to nan if there is no biomass:
ix_max_BF(BF_summedVuln<0.01)=NaN;
% -----
% plot the biomass as a mean of the nutrient concentrations (iNUT)
sp1=subplot(1,2,1); 
% -----
imagesc(massofgeneralists,mortHTLvector(1:maxmortgroup),mean(BF_summedVuln,3,'omitnan'));
set(gca,'XScale','log','YScale','log','YDir', 'normal');
ylabel('Higher trophic level pressure','FontWeight','bold')
xlabel('organism size (\mugC)','FontWeight','bold')
xlim([min(mLower) max(mLower+mDelta)]);
colormap(sp1,tempo)
cc1=colorbar('Location','southoutside');
set(cc1.Label,'String','Summed biomass');
title('a)','HorizontalAlignment','left','Position',[5e-8,1.1,2.7])

% -----
% plot the vulneratility with most biomass (mean of iNUT)
sp2=subplot(1,2,2);
% -----
% first, find the mean (dim3=iNUT) and subtract one (prokaryote)
theVulnIdx=(round(mean(ix_max_BF,3,'omitnan'))-1);
% find nan indexes
nanidx=isnan(theVulnIdx);
% create a temporary extra vulnerability catagory:
palatability(k+1)=1;
% and assign the NaN value this vulnerability:
theVulnIdx(isnan(theVulnIdx))=k+1;
thePatatabilities=palatability(theVulnIdx);
% turn the NaNs back into NaNs
thePatatabilities(nanidx)=NaN;
% and remove the temporary extra vulnerability catagory
palatability(k+1)=[];

imagesc(massofgeneralists,mortHTLvector(1:maxmortgroup),thePatatabilities,'AlphaData', ~isnan(thePatatabilities));
set(sp2, 'XScale','log','YScale','log','YDir', 'normal');
xlabel('organism size (\mugC)','FontWeight','bold')
xlim([min(mLower) max(mLower+mDelta)]);
colormap(sp2,VulnerabilityColormap)
xlim([min(mLower) max(mLower+mDelta)]);
cc2=colorbar('Location','southoutside');
set(cc2.Label,'String','Optimal vulnerability');
title('b)','HorizontalAlignment','left','Position',[5e-8,1.1,2.7])

%% Plot for each of the iNUT
figure('Color','w');
tiledlayout(6,5)
for i=1:30
    % subplot(6,5,i)
    nexttile(i)
    imagesc(massofgeneralists,mortHTLvector(1:maxmortgroup),BF_summedVuln(:,:,i))
    set(gca,'XScale','log','YScale','log','YDir','normal');
    xlim([min(mLower) max(mLower+mDelta)]);
    if i>25
     xlabel('size')
    end
    if ismember(i,1:5:30)
        ylabel('mortHTL')
    end
    title([num2str(i), ') nutrient =',num2str(dvector(i))],'HorizontalAlignment','center')
end
sgtitle('Summerized Phagotrophic biomass')
%%

figure('Color','w');
for i=1:30
    subplot(6,5,i)
    pcolor(massofgeneralists,mortHTLvector(1:maxmortgroup),ix_max_BF(:,:,i)-1)
    set(gca,'XScale','log','YScale','log','YDir', 'normal');
    xlim([min(mLower) max(mLower+mDelta)]);
    if i>25
     xlabel('size')
    end
    if ismember(i,1:5:30)
        ylabel('mortHTL')
    end
end
sgtitle('optimal vulnerability index')



%% For a point, plot the biomass as a function of vulnerability
iHTL=20; %x-axis
iNUT=1:30; %y-axis, can be one or all iNUT
iSize=[7,8,10:2:18];
% iSize=[17:20];
% figure('Color','w');
BF_all=nan(k+1,n,length(iNUT));
for j=1:length(iNUT)
    thisname=[namestart,num2str(iHTL),'_dvector_',num2str(iNUT(j)),'.mat'];
    tmp_load=load(thisname);
    for i=1:p.nGroups
        BF_this(i,1:n)=tmp_load.B_mean(n*(i-1)+1:n*i).*(tmp_load.jFreal_mean(n*(i-1)+1:n*i)./(tmp_load.jDOC_mean(n*(i-1)+1:n*i)+tmp_load.jLreal_mean(n*(i-1)+1:n*i)+tmp_load.jFreal_mean(n*(i-1)+1:n*i)));
    end
    BF_all(:,:,j)=BF_this;
end

figure('Color','w')
hold on
for i=1:length(iSize)
    thisres=sum(BF_all(p.typeGroups==1,iSize(i),:),3);
    h=plot(palatability,thisres./max(thisres),'-o','LineWidth',1.5,'DisplayName',['organism size: ',num2str(massofgeneralists(iSize(i)))]);
    thisk=get(h,'Color');
    set(h,'MarkerFaceColor',thisk); 
end
% legend show
set(gca,'XScale','log');
xlabel('vulnerability');
ylabel('normalized biomass');
% title(['mortHTL = ',num2str(mortHTLvector(iHTL))])
%%
[x1,y1]=meshgrid(massofgeneralists,palatability);
figure;surf(x1,y1,BF_this(p.typeGroups==1,:))
set(gca,'XScale','log','YScale','log');
ylabel('vulnerability');
xlabel('size');
zlabel('biomass')
title(['mortHTL = ',num2str(mortHTLvector(iHTL)),' mixing rate = ',num2str(dvector(iNUT)),' size group = ',num2str(iSize),' out of ', num2str(n)])

%%
for iHTL=1:30 %x-axis
    iNUT=1; %y-axis
    iSize=8; %19;
    thisname=[namestart,num2str(iHTL),'_dvector_',num2str(iNUT),'.mat'];
    tmp_load=load(thisname);
    for i=1:p.nGroups
        BF_this(i,1:n)=tmp_load.B_mean(n*(i-1)+1:n*i).*(tmp_load.jFreal_mean(n*(i-1)+1:n*i)./(tmp_load.jDOC_mean(n*(i-1)+1:n*i)+tmp_load.jLreal_mean(n*(i-1)+1:n*i)+tmp_load.jFreal_mean(n*(i-1)+1:n*i)));
    end
    BF_total(iHTL,:)=(BF_this(p.typeGroups==1,iSize))';
end
BF_total(BF_total<0.001)=0.001;
[x2,y2]=meshgrid(palatability,1:30);
figure;
surf(y2,x2,log10(BF_total))
% set(gca,'YScale','log');
ylabel('vulnerability');
xlabel('iHTL');
zlabel('biomass')
title(['mortHTL = ',num2str(mortHTLvector(iHTL)),' mixing rate = ',num2str(dvector(iNUT)),' size group = ',num2str(iSize),' out of ', num2str(n)])
view([0 90]);
colorbar


%%
% figure;
% tiledlayout(length(dvector),length(mortHTLvector),'TileIndexing','columnmajor')
%
% for mortgroup=1:length(mortHTLvector)
%     for ngroup=1:length(dvector)
%         a=nan(k,n);
%         for i=2:k+1
%             theratio(i-1,:)=B_F(ngroup,p.ixStart(i)-2:p.ixEnd(i)-2,mortgroup)./(B_F(ngroup,p.ixStart(i)-2:p.ixEnd(i)-2,mortgroup)+B_L(ngroup,p.ixStart(i)-2:p.ixEnd(i)-2,mortgroup)).*100;
%         end
%         nexttile
%         contourf(theratio)
%         clim([0 100])
%         set(gca,'XScale','log')
%         ylabel('vulnerability group number')
%         xlabel('size')
%         title(['mort=',num2str(mortgroup),' mixing=',num2str(ngroup)])
%     end
% end








